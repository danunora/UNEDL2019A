###############################
Tareas Programacion Visual III
###############################

##################################### 03/22/2019 
PVT1 TAREA # 1 INVESTIGAR: Paradigmas de programacion
En que consiste cada uno de los siguientes paradigmas de programación y ejemplos de lenguajes de programación: 
Programación Estructurada
Programación Visual 
Programación Orientada a Objetos 
Programación Orientada a Eventos
¿A qué se refiere el concepto de RAD (rapid application development)?
¿Qué es un IDE? y mencionar ejemplos
Conclusiones

##################################### 03/27/2019
EJERCICIO EN CLASE:
- Organizarse en equipos de 3 elementos
- Crear una cuenta en https://bitbucket.org/
- Leer https://www.atlassian.com/git/tutorials/learn-about-code-review-in-bitbucket-cloud

##################################### 03/27/2019 
PVT2 TAREA # 2: Realizar software
- Elegir un problema para realizar un software utilizando:
- Tipos de datos primitivos
- Constantes
- Operadores
- Instrucciones de control de flujo:
- Condicionales
- Iteracion.
- Hacer "code review".
https://www.atlassian.com/git/tutorials/what-is-version-control 

###################################### 03/28/2019 Glosario
PVT3 TAREA3: 
Realizar el glosario para el 1er parcial utilizando el formato de tareas:

https://github.com/danunora/UNEDL2019A/blob/master/Docs/UNEDL_formato_tareas_pvIII.doc

###################################### 04/03/2019 Practica con pull request

### Desde git bash:
### HOME es una variable de ambiente que contiene su home directory.

$ echo $HOME
$ cd $HOME
$ mkdir Temp
$ cd Temp

### Clonar el repositorio prueba en el directorio Temp
$ git clone https://danunora@bitbucket.org/unedl2019at1/pruebat1/prueba.git

### Ir a www.bitbucket.com para crear un branch segun la liga que previamente les pase.
### Una vez creado el branch "<nombre por alumno>", cambiarse a ese branch:

### usando el branch "carlos" como ejemplo:
$ git fetch && git checkout carlos

### realizar la edicion de archivos o los cambios, etc
$ vim axel.txt

### agregar cambios y realizar el commit en el repositorio local:
$ git add axel.txt
$ git commit -a -m "axel work"

### Empujar los cambios hacia bitbucket en el branch "carlos"
$ git push origin carlos

### Desde bitbucket hacer un pull request
### hacer pull request, se refiere a que estas solicitando al dueno del
### branch master, que tome los cambios desde el branch "carlos" y 
### te permita mezclarlos (hacer merge)

###################################### 04/04/2019 Java Virtual Machine
PVT4 TAREA # Realizar un ensayo de la Java Virtual Machine
Realizar un ensayo de la Java Virtual Machine
https://www.youtube.com/watch?v=G1ubVOl9IBw
https://www.tutorialspoint.com/java_virtual_machine/index.htm
https://www.geeksforgeeks.org/jvm-works-jvm-architecture/  
Subir el documento a github o bitbucket y enviar por email (daniel_nuno@hotmail.com) la liga al mismo.

###################################### 05/05/2019 Delegados y Eventos
PVT5 TAREA #  Delegados en C#:
Revisar los siguientes videos: 
https://www.youtube.com/watch?v=GQbJH6HRenE
https://www.youtube.com/watch?v=g0urRI85JQ0
https://www.youtube.com/watch?v=jQgwEsJISy0&t=501s  
Realizar un ejemplo con lo aprendido
Subir el programa a github o bitbucket y enviar por email (daniel_nuno@hotmail.com) la liga al mismo.

####################################### 05/09/2019 Calculadora de Ofertas
PVT6 TAREA # En base al archivo:
https://github.com/danunora/UNEDL2019A/blob/master/Docs/Calculadora_Ofertas.xlsx
Elaborar una calculadora de ofertas.
1) Recibir del usuario el nombre, email.
2) Permitir capturar al salario anual o mensual, para elaborar la oferta. 
3) Las prestaciones de ley deberan estar en un recuadro y las opcionales en otro.
4) Las prestaciones opcionales se podran habilitar o deshabilitar, se deberan ajustar los montos automaticamente.
5) La oferta ya terminada, se debera poder enviar a un archivo de texto, imprimir a un PDF o por correo. 

######################################## 05/24/2019 Exposicion Dekker/Peterson
PVT7 TAREA # Algoritmo de Peterson/Dekker:
Realizar una exposición acerca de:
Algoritmo de Peterson (Mauricio, Axel, Carlos, Tony, Leonardo)
Algoritmo de Dekker (Miguel, Jaime, Christian, Ulises,Brian)
Subir el programa a github o bitbucket y enviar por email (daniel_nuno@hotmail.com) la liga al mismo.  

######################################## 05/29/2019 
PVT8 Ejercicio en clase:  Reloj Checador Multithread
En base al ejercicio del Reloj Checador (FileStream), realizar una simulación de que 
varias personas checan su entrada/salida.
Cada persona será un thread, 
La persona puede checar entrada o salida
http://www.johandorper.com/log/thread-safe-file-writing-csharp
Subir el programa a github o bitbucket y enviar por email (daniel_nuno@hotmail.com) la liga al mismo.

######################################## 06/05/2019
PVT9 Realizar un ensayo en base a 
https://docs.oracle.com/javase/tutorial/essential/concurrency/

###################### TERCER PARCIAL #############
######################################## 06/21/2019
PVT10 Left Rotation of an Array,
Crear un arreglo de enteros 
1) Solicitar al usuario el tamaño : n
2) Solicitar al usuario el numero de rotaciones : r
3) Solicitar al usuario los enteros del arreglo
Hacer la rotacion del arreglo a la izquierda el numero
de rotaciones dado y regresar el arreglo, ejemplo:

Tamaño del Arreglo: 5
Rotaciones: 2
Elementos: 1,2,3,4,5
Arreglo Rotado: 3,4,5,1,2
######################################## 06/21/2019
PVT11 Realizar el algoritmo de ordenamiento de un arreglo 
sin utilizar biblitecas de ordenamiento.
Arreglos: 
[  entrada  ][  salida   ]
[1,0,0,1,0,1][0,0,0,1,1,1]
[0,0,0,1,1,0][0,0,0,0,1,1]
[0,0,0,0,0,1][0,0,0,0,0,1]
######################################## 06/27/2019
PVT12 Dado un arreglo de cadenas inicial, encontrar los miembros 
de un segundo arreglo, en el primero y regresar las ocurrencias.
Se debera solicitar al usuario: 
1) la cantidad de elementos de ambos arreglos
2) los miembros de ambos arreglos (cadenas)
Ejemplo:
- Arreglo para buscar:
A=[aba, baba, aba, xzxb]
- Arreglo a buscar:
B=[aba, xzxb, ab]
- Resultado:
[2,1,0]

Explicacion: 
aba aparece 2 veces en el arreglo A,  
xzxb aparece 1 vez en el arreglo A,

Ejemplo:
- Arreglo para buscar:
A=[def, de, fgh, xzxb]
- Arreglo a buscar:
B=[de, lmn, fgh]
- Resultado:
[1,0,1]

Explicacion: 
de aparece 1 vez en el arreglo A,  
fgh aparece 1 vez en el arreglo A,

######################################## 07/03/2019
TAREA #  Java RMI, C# WCF: 3er Parcial
Realizar una investigación acerca de:
Java Remote Method Invocation (RMI)
Java Persistence API (JPA), https://www.tutorialspoint.com/jpa/
Java Management Extensions (JMX), https://docs.oracle.com/javase/tutorial/jmx/index.html 
Spring MVC
WCF (Windows Communication Foundation)
ASP.NET
.NET Persistence API (http://www.npersistence.org/)
Subir el documento a github o bitbucket y enviar por email (daniel_nuno@hotmail.com) la liga al mismo.

######################################## 07/03/2019
Ejercicio: Obtener el mayor valor de un arreglo despues de realizar las operaciones
de suma de un valor en un rango dado.
Solicitar al usuario:
1) Tamaño del arreglo: 
2) Cantidad de operaciones a realizar de la siguiente forma:
	a) posicion inicial
	b) posicion final
	c) cantidad a sumar

Regresar:
El mayor valor del arreglo resultante

Ejemplo:
Tamaño del arreglo: 5
Cantidad de operaciones: 3
1) 1 2 100
2) 3 4 100
3) 1 3 100
Resultado: 200

[0,0,0,0,0]
[100,100,0,0,0] <- operacion 1)
[100,100,100,100,0] <- operacion 2)
[200,200,200,100,0] <- operacion 3)
